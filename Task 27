class Pair<T, U> {
    private T first;
    private U second;

    public Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public void setFirst(T first) {
        this.first = first;
    }

    public U getSecond() {
        return second;
    }

    public void setSecond(U second) {
        this.second = second;
    }

    @Override
    public String toString() {
        return "(" + first + ", " + second + ")";
    }
}
class SwapUtil {
    public static <T> void swap(Pair<T, T> pair) {
        T temp = pair.getFirst();
        pair.setFirst(pair.getSecond());
        pair.setSecond(temp);
    }
}
class MaxFinder {
    public static <T extends Comparable<T>> T findMaximum(T a, T b, T c) {
        T max = a;
        if (b.compareTo(max) > 0) {
            max = b;
        }
        if (c.compareTo(max) > 0) {
            max = c;
        }
        return max;
    }
}
public class GenericDemo {
    public static void main(String[] args) {
        Pair<Integer, String> pair = new Pair<>(1, "Java");
        System.out.println("Original Pair: " + pair);
        pair.setFirst(2);
        pair.setSecond("Generics");
        System.out.println("Updated Pair: " + pair);
        Pair<Integer, Integer> numPair = new Pair<>(10, 20);
        System.out.println("Before Swap: " + numPair);
        SwapUtil.swap(numPair);
        System.out.println("After Swap: " + numPair);
        System.out.println("Maximum of (10, 25, 15): " + MaxFinder.findMaximum(10, 25, 15));
        System.out.println("Maximum of (5.6, 7.8, 3.4): " + MaxFinder.findMaximum(5.6, 7.8, 3.4));
        System.out.println("Maximum of ('Apple', 'Banana', 'Peach'): " + MaxFinder.findMaximum("Apple", "Banana", "Peach"));
    }
}
