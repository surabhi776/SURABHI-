import java.sql.*;
public class BankingSystem {
    private static final String URL = "jdbc:mysql://localhost:3306/bank_db";
    private static final String USER = "root";  
    private static final String PASSWORD = "";  

    public static void main(String[] args) {
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)) {
            connection.setAutoCommit(false); 
            
            try {
                processTransaction(connection, 1, 500, "DEPOSIT");
                processTransaction(connection, 2, 300, "WITHDRAW");
                processTransaction(connection, 3, 1000, "DEPOSIT");
                connection.commit();
                System.out.println("All transactions committed successfully.");
            } catch (SQLException e);
                connection.rollback();
                System.out.println("Transaction failed. Rolling back changes.");
                e.printStackTrace();
            }
            batchInsertTransactions(connection);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private static void processTransaction(Connection connection, int accountId, double amount, String type) throws SQLException {
        String queryBalance = "SELECT balance FROM bank_accounts WHERE account_id = ?";
        try (PreparedStatement ps = connection.prepareStatement(queryBalance)) {
            ps.setInt(1, accountId);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                double balance = rs.getDouble("balance");
                if (type.equals("WITHDRAW") && balance < amount) {
                    throw new SQLException("Insufficient balance in account " + accountId);
                }
                String updateBalance = "UPDATE bank_accounts SET balance = balance + ? WHERE account_id = ?";
                try (PreparedStatement psUpdate = connection.prepareStatement(updateBalance)) {
                    psUpdate.setDouble(1, type.equals("DEPOSIT") ? amount : -amount);
                    psUpdate.setInt(2, accountId);
                    psUpdate.executeUpdate();
                }
                String insertTransaction = "INSERT INTO transactions (account_id, amount, transaction_type) VALUES (?, ?, ?)";
                try (PreparedStatement psInsert = connection.prepareStatement(insertTransaction)) {
                    psInsert.setInt(1, accountId);
                    psInsert.setDouble(2, amount);
                    psInsert.setString(3, type);
                    psInsert.executeUpdate();
                }
            } else {
                throw new SQLException("Account ID " + accountId + " not found.");
            }
        }
    }
    private static void batchInsertTransactions(Connection connection) {
        String insertSQL = "INSERT INTO transactions (account_id, amount, transaction_type) VALUES (?, ?, ?)";
        
        try (PreparedStatement ps = connection.prepareStatement(insertSQL)) {
            connection.setAutoCommit(false);
            ps.setInt(1, 1);
            ps.setDouble(2, 200);
            ps.setString(3, "DEPOSIT");
            ps.addBatch();

            ps.setInt(1, 2);
            ps.setDouble(2, 150);
            ps.setString(3, "WITHDRAW");
            ps.addBatch();

            ps.setInt(1, 3);
            ps.setDouble(2, 500);
            ps.setString(3, "DEPOSIT");
            ps.addBatch();
            int[] results = ps.executeBatch();
            connection.commit();
            System.out.println("Batch transactions inserted successfully: " + results.length);
        } catch (SQLException e) {
            try {
                connection.rollback();
                System.out.println("Batch processing failed. Rolling back.");
            } catch (SQLException rollbackEx) {
                rollbackEx.printStackTrace();
            }
            e.printStackTrace();
        }
    }
}
